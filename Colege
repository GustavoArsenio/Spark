import pyspark

from pyspark.ml.feature import VectorAssembler
from pyspark.ml.feature import VectorAssembler
from pyspark.ml.feature import StringIndexer
from pyspark.ml.classification import (DecisionTreeClassifier,GBTClassifier,RandomForestClassifier)
from pyspark.ml.regression import RandomForestRegressor
from pyspark.ml.evaluation import BinaryClassificationEvaluator

spark = pyspark.sql.SparkSession.builder.appName('tree_test').getOrCreate()
data = spark.read.csv('College.csv',inferSchema=True,header=True)
data.columns
assembler = VectorAssembler(inputCols=data.columns,outputCol='features')
assembler
assembler = VectorAssembler(inputCols=['School', 'Private', 'Apps', 'Accept', 'Enroll', 'Top10perc', 'Top25perc', 'F_Undergrad', 'P_Undergrad', 'Outstate', 'Room_Board', 'Books', 'Personal', 'PhD', 'Terminal', 'S_F_Ratio', 'perc_alumni', 'Expend', 'Grad_Rate'],outputCol='features')
output = assembler.transform(data)
data
assembler
data = spark.read.csv('College.csv',inferSchema=True,header=True)
data.columnsrsonal', 'PhD', 'Terminal', 'S_F_Ratio', 'perc_alumni', 'Expend', 'Grad_Rate'],outputCol='feature')
output = assembler.transform(data)
indexer = StringIndexer(inputCol='Private',outputCol='PrivateIndex')
output_fixed = indexer.fit(output).transform(output)
final_data = output_fixed.select('feature','PrivateIndex')
train_data,test_data = final_data.randomSplit([0.7,0.3])
gbt = GBTClassifier(labelCol='PrivateIndex',featuresCol='feature')
dtc = DecisionTreeClassifier(labelCol='PrivateIndex',featuresCol='feature')
rfc = RandomForestClassifier(labelCol='PrivateIndex',featuresCol='feature')
gbt = GBTClassifier(labelCol='PrivateIndex',featuresCol='feature')
dtc_model = dtc.fit(train_data)
rfc_model = rfc.fit(train_data)
gbt_model = gbt.fit(train_data)
dtc_preds = dtc_model.transform(test_data)
rfc_preds = rfc_model.transform(test_data)
gbt_preds = gbt_model.transform(test_data)
my_binary_eval = BinaryClassificationEvaluator(labelCol='PrivateIndex')
my_binary_eval.evaluate(dtc_preds)
my_binary_eval.evaluate(rfc_preds)
my_binary_eval.evaluate(gbt_preds)
my_binary_eval.evaluate(gbt_preds)
my_binary_eval2 = BinaryClassificationEvaluator(labelCol='PrivateIndex',rawPredictionCol='prediction')
my_binary_eval2.evaluate(gbt_preds)
rfc = RandomForestClassifier(numTrees=150,labelCol='PrivateIndex',featuresCol='feature')
rfc_model = rfc.fit(train_data)
rfc_preds = rfc_model.transform(test_data)
my_binary_eval.evaluate(rfc_preds)

